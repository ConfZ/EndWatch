; ModuleID = 'CVE-2022-0586.c'
source_filename = "CVE-2022-0586.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.tvbuff = type { ptr, i32 }

@.str = private unnamed_addr constant [16 x i8] c"itemlen is: %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"iObjType is: %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i8 @tvb_get_guint8(ptr noundef %tv, i32 noundef %offset) #0 {
entry:
  %retval = alloca i8, align 1
  %tv.addr = alloca ptr, align 8
  %offset.addr = alloca i32, align 4
  store ptr %tv, ptr %tv.addr, align 8
  store i32 %offset, ptr %offset.addr, align 4
  %0 = load i32, ptr %offset.addr, align 4
  %1 = load ptr, ptr %tv.addr, align 8
  %length = getelementptr inbounds %struct.tvbuff, ptr %1, i32 0, i32 1
  %2 = load i32, ptr %length, align 8
  %cmp = icmp uge i32 %0, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8 0, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %3 = load ptr, ptr %tv.addr, align 8
  %real_data = getelementptr inbounds %struct.tvbuff, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %real_data, align 8
  %5 = load i32, ptr %offset.addr, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i8, ptr %4, i64 %idx.ext
  %6 = load i8, ptr %add.ptr, align 1
  store i8 %6, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i8, ptr %retval, align 1
  ret i8 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i16 @tvb_get_ntohs(ptr noundef %tvb, i32 noundef %offset) #0 {
entry:
  %tvb.addr = alloca ptr, align 8
  %offset.addr = alloca i32, align 4
  %ptr = alloca ptr, align 8
  store ptr %tvb, ptr %tvb.addr, align 8
  store i32 %offset, ptr %offset.addr, align 4
  %0 = load i32, ptr %offset.addr, align 4
  %1 = load ptr, ptr %tvb.addr, align 8
  %length = getelementptr inbounds %struct.tvbuff, ptr %1, i32 0, i32 1
  %2 = load i32, ptr %length, align 8
  %cmp = icmp uge i32 %0, %2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store ptr null, ptr %ptr, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load ptr, ptr %tvb.addr, align 8
  %real_data = getelementptr inbounds %struct.tvbuff, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %real_data, align 8
  %5 = load i32, ptr %offset.addr, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i8, ptr %4, i64 %idx.ext
  store ptr %add.ptr, ptr %ptr, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load ptr, ptr %ptr, align 8
  %call = call zeroext i16 @pntoh16(ptr noundef %6)
  ret i16 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i16 @pntoh16(ptr noundef %p) #0 {
entry:
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %add.ptr = getelementptr inbounds i8, ptr %0, i64 0
  %1 = load i8, ptr %add.ptr, align 1
  %conv = zext i8 %1 to i16
  %conv1 = zext i16 %conv to i32
  %shl = shl i32 %conv1, 8
  %2 = load ptr, ptr %p.addr, align 8
  %add.ptr2 = getelementptr inbounds i8, ptr %2, i64 1
  %3 = load i8, ptr %add.ptr2, align 1
  %conv3 = zext i8 %3 to i16
  %conv4 = zext i16 %conv3 to i32
  %shl5 = shl i32 %conv4, 0
  %or = or i32 %shl, %shl5
  %conv6 = trunc i32 %or to i16
  ret i16 %conv6
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @tvb_get_ntohl(ptr noundef %tvb, i32 noundef %offset) #0 {
entry:
  %tvb.addr = alloca ptr, align 8
  %offset.addr = alloca i32, align 4
  %ptr = alloca ptr, align 8
  store ptr %tvb, ptr %tvb.addr, align 8
  store i32 %offset, ptr %offset.addr, align 4
  %0 = load i32, ptr %offset.addr, align 4
  %1 = load ptr, ptr %tvb.addr, align 8
  %length = getelementptr inbounds %struct.tvbuff, ptr %1, i32 0, i32 1
  %2 = load i32, ptr %length, align 8
  %cmp = icmp uge i32 %0, %2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store ptr null, ptr %ptr, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load ptr, ptr %tvb.addr, align 8
  %real_data = getelementptr inbounds %struct.tvbuff, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %real_data, align 8
  %5 = load i32, ptr %offset.addr, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i8, ptr %4, i64 %idx.ext
  store ptr %add.ptr, ptr %ptr, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load ptr, ptr %ptr, align 8
  %call = call i32 @pntoh32(ptr noundef %6)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @pntoh32(ptr noundef %p) #0 {
entry:
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %add.ptr = getelementptr inbounds i8, ptr %0, i64 0
  %1 = load i8, ptr %add.ptr, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 24
  %2 = load ptr, ptr %p.addr, align 8
  %add.ptr1 = getelementptr inbounds i8, ptr %2, i64 1
  %3 = load i8, ptr %add.ptr1, align 1
  %conv2 = zext i8 %3 to i32
  %shl3 = shl i32 %conv2, 16
  %or = or i32 %shl, %shl3
  %4 = load ptr, ptr %p.addr, align 8
  %add.ptr4 = getelementptr inbounds i8, ptr %4, i64 2
  %5 = load i8, ptr %add.ptr4, align 1
  %conv5 = zext i8 %5 to i32
  %shl6 = shl i32 %conv5, 8
  %or7 = or i32 %or, %shl6
  %6 = load ptr, ptr %p.addr, align 8
  %add.ptr8 = getelementptr inbounds i8, ptr %6, i64 3
  %7 = load i8, ptr %add.ptr8, align 1
  %conv9 = zext i8 %7 to i32
  %shl10 = shl i32 %conv9, 0
  %or11 = or i32 %or7, %shl10
  ret i32 %or11
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %length = alloca i32, align 4
  %offset = alloca i32, align 4
  %real_data = alloca ptr, align 8
  %i = alloca i32, align 4
  %tvb = alloca ptr, align 8
  %remain = alloca i32, align 4
  %depth = alloca i32, align 4
  %itemlen = alloca i32, align 4
  %rv = alloca i32, align 4
  %iObjType = alloca i8, align 1
  store i32 0, ptr %retval, align 4
  %call = call i32 (...) @__VERIFIER_nondet_int()
  store i32 %call, ptr %length, align 4
  %call1 = call i32 (...) @__VERIFIER_nondet_int()
  store i32 %call1, ptr %offset, align 4
  %0 = load i32, ptr %length, align 4
  %add = add i32 %0, 1
  %conv = zext i32 %add to i64
  %mul = mul i64 1, %conv
  %call2 = call noalias ptr @malloc(i64 noundef %mul) #3
  store ptr %call2, ptr %real_data, align 8
  %1 = load ptr, ptr %real_data, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, ptr %i, align 4
  %3 = load i32, ptr %length, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call4 = call i32 (...) @__VERIFIER_nondet_uchar()
  %conv5 = trunc i32 %call4 to i8
  %4 = load ptr, ptr %real_data, align 8
  %5 = load i32, ptr %i, align 4
  %idx.ext = zext i32 %5 to i64
  %add.ptr = getelementptr inbounds i8, ptr %4, i64 %idx.ext
  store i8 %conv5, ptr %add.ptr, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4
  %inc = add i32 %6, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  %call6 = call noalias ptr @malloc(i64 noundef 16) #3
  store ptr %call6, ptr %tvb, align 8
  %7 = load ptr, ptr %real_data, align 8
  %8 = load ptr, ptr %tvb, align 8
  %real_data7 = getelementptr inbounds %struct.tvbuff, ptr %8, i32 0, i32 0
  store ptr %7, ptr %real_data7, align 8
  %9 = load i32, ptr %length, align 4
  %10 = load ptr, ptr %tvb, align 8
  %length8 = getelementptr inbounds %struct.tvbuff, ptr %10, i32 0, i32 1
  store i32 %9, ptr %length8, align 8
  %11 = load ptr, ptr %tvb, align 8
  %length9 = getelementptr inbounds %struct.tvbuff, ptr %11, i32 0, i32 1
  %12 = load i32, ptr %length9, align 8
  %13 = load i32, ptr %offset, align 4
  %sub = sub i32 %12, %13
  store i32 %sub, ptr %remain, align 4
  %14 = load i32, ptr %remain, align 4
  %cmp10 = icmp slt i32 %14, 0
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %for.end
  store i32 0, ptr %retval, align 4
  br label %return

if.end13:                                         ; preds = %for.end
  store i32 0, ptr %depth, align 4
  store i32 0, ptr %itemlen, align 4
  store i32 0, ptr %rv, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end94, %if.then57, %if.end13
  %15 = load i32, ptr %rv, align 4
  %cmp14 = icmp eq i32 %15, 0
  br i1 %cmp14, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %16 = load i32, ptr %depth, align 4
  %cmp16 = icmp ugt i32 %16, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %17 = phi i1 [ true, %while.cond ], [ %cmp16, %lor.rhs ]
  br i1 %17, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %18 = load i32, ptr %depth, align 4
  %cmp18 = icmp ugt i32 %18, 0
  br i1 %cmp18, label %if.then20, label %if.end37

if.then20:                                        ; preds = %while.body
  %19 = load i32, ptr %remain, align 4
  %20 = load i32, ptr %rv, align 4
  %sub21 = sub nsw i32 %19, %20
  %cmp22 = icmp slt i32 %sub21, 2
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.then20
  %21 = load i32, ptr %remain, align 4
  store i32 %21, ptr %retval, align 4
  br label %return

if.end25:                                         ; preds = %if.then20
  %22 = load ptr, ptr %tvb, align 8
  %23 = load i32, ptr %offset, align 4
  %24 = load i32, ptr %rv, align 4
  %add26 = add i32 %23, %24
  %call27 = call zeroext i16 @tvb_get_ntohs(ptr noundef %22, i32 noundef %add26)
  %conv28 = zext i16 %call27 to i32
  %add29 = add nsw i32 %conv28, 2
  store i32 %add29, ptr %itemlen, align 4
  %25 = load i32, ptr %remain, align 4
  %26 = load i32, ptr %rv, align 4
  %sub30 = sub nsw i32 %25, %26
  %27 = load i32, ptr %itemlen, align 4
  %add31 = add nsw i32 %27, 1
  %cmp32 = icmp slt i32 %sub30, %add31
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.end25
  %28 = load i32, ptr %remain, align 4
  store i32 %28, ptr %retval, align 4
  br label %return

if.end35:                                         ; preds = %if.end25
  %29 = load i32, ptr %itemlen, align 4
  %30 = load i32, ptr %rv, align 4
  %add36 = add nsw i32 %30, %29
  store i32 %add36, ptr %rv, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.end35, %while.body
  %31 = load i8, ptr %iObjType, align 1
  %conv38 = sext i8 %31 to i32
  %call39 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %conv38)
  %32 = load i32, ptr %remain, align 4
  %33 = load i32, ptr %rv, align 4
  %sub40 = sub nsw i32 %32, %33
  %cmp41 = icmp slt i32 %sub40, 1
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.end37
  %34 = load i32, ptr %remain, align 4
  store i32 %34, ptr %retval, align 4
  br label %return

if.end44:                                         ; preds = %if.end37
  %35 = load ptr, ptr %tvb, align 8
  %36 = load i32, ptr %offset, align 4
  %37 = load i32, ptr %rv, align 4
  %add45 = add i32 %36, %37
  %call46 = call signext i8 @tvb_get_guint8(ptr noundef %35, i32 noundef %add45)
  store i8 %call46, ptr %iObjType, align 1
  %38 = load i8, ptr %iObjType, align 1
  %conv47 = sext i8 %38 to i32
  %call48 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef %conv47)
  %39 = load i32, ptr %depth, align 4
  %cmp49 = icmp ugt i32 %39, 0
  br i1 %cmp49, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %if.end44
  %40 = load i32, ptr %itemlen, align 4
  %cmp51 = icmp eq i32 %40, 2
  br i1 %cmp51, label %land.lhs.true53, label %if.end59

land.lhs.true53:                                  ; preds = %land.lhs.true
  %41 = load i8, ptr %iObjType, align 1
  %conv54 = sext i8 %41 to i32
  %cmp55 = icmp eq i32 %conv54, 9
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %land.lhs.true53
  %42 = load i32, ptr %rv, align 4
  %inc58 = add nsw i32 %42, 1
  store i32 %inc58, ptr %rv, align 4
  %43 = load i32, ptr %depth, align 4
  %dec = add i32 %43, -1
  store i32 %dec, ptr %depth, align 4
  br label %while.cond, !llvm.loop !8

if.end59:                                         ; preds = %land.lhs.true53, %land.lhs.true, %if.end44
  %44 = load i8, ptr %iObjType, align 1
  %conv60 = sext i8 %44 to i32
  switch i32 %conv60, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb61
    i32 2, label %sw.bb62
    i32 5, label %sw.bb73
    i32 6, label %sw.bb73
    i32 13, label %sw.bb73
    i32 11, label %sw.bb74
    i32 12, label %sw.bb75
    i32 15, label %sw.bb75
    i32 34, label %sw.bb85
    i32 3, label %sw.bb86
    i32 8, label %sw.bb88
  ]

sw.bb:                                            ; preds = %if.end59
  store i32 9, ptr %itemlen, align 4
  br label %sw.epilog

sw.bb61:                                          ; preds = %if.end59
  store i32 2, ptr %itemlen, align 4
  br label %sw.epilog

sw.bb62:                                          ; preds = %if.end59
  %45 = load i32, ptr %remain, align 4
  %46 = load i32, ptr %rv, align 4
  %sub63 = sub nsw i32 %45, %46
  %cmp64 = icmp slt i32 %sub63, 3
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %sw.bb62
  %47 = load i32, ptr %remain, align 4
  store i32 %47, ptr %retval, align 4
  br label %return

if.end67:                                         ; preds = %sw.bb62
  %48 = load ptr, ptr %tvb, align 8
  %49 = load i32, ptr %offset, align 4
  %50 = load i32, ptr %rv, align 4
  %add68 = add i32 %49, %50
  %add69 = add i32 %add68, 1
  %call70 = call zeroext i16 @tvb_get_ntohs(ptr noundef %48, i32 noundef %add69)
  %conv71 = zext i16 %call70 to i32
  %add72 = add nsw i32 %conv71, 3
  store i32 %add72, ptr %itemlen, align 4
  br label %sw.epilog

sw.bb73:                                          ; preds = %if.end59, %if.end59, %if.end59
  store i32 1, ptr %itemlen, align 4
  br label %sw.epilog

sw.bb74:                                          ; preds = %if.end59
  store i32 11, ptr %itemlen, align 4
  br label %sw.epilog

sw.bb75:                                          ; preds = %if.end59, %if.end59
  %51 = load i32, ptr %remain, align 4
  %52 = load i32, ptr %rv, align 4
  %sub76 = sub nsw i32 %51, %52
  %cmp77 = icmp slt i32 %sub76, 5
  br i1 %cmp77, label %if.then79, label %if.end80

if.then79:                                        ; preds = %sw.bb75
  %53 = load i32, ptr %remain, align 4
  store i32 %53, ptr %retval, align 4
  br label %return

if.end80:                                         ; preds = %sw.bb75
  %54 = load ptr, ptr %tvb, align 8
  %55 = load i32, ptr %offset, align 4
  %56 = load i32, ptr %rv, align 4
  %add81 = add i32 %55, %56
  %add82 = add i32 %add81, 1
  %call83 = call i32 @tvb_get_ntohl(ptr noundef %54, i32 noundef %add82)
  %add84 = add i32 %call83, 5
  store i32 %add84, ptr %itemlen, align 4
  br label %sw.epilog

sw.bb85:                                          ; preds = %if.end59
  store i32 9, ptr %itemlen, align 4
  br label %sw.epilog

sw.bb86:                                          ; preds = %if.end59
  store i32 1, ptr %itemlen, align 4
  %57 = load i32, ptr %depth, align 4
  %inc87 = add i32 %57, 1
  store i32 %inc87, ptr %depth, align 4
  br label %sw.epilog

sw.bb88:                                          ; preds = %if.end59
  store i32 5, ptr %itemlen, align 4
  %58 = load i32, ptr %depth, align 4
  %inc89 = add i32 %58, 1
  store i32 %inc89, ptr %depth, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end59
  %59 = load i32, ptr %remain, align 4
  store i32 %59, ptr %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb88, %sw.bb86, %sw.bb85, %if.end80, %sw.bb74, %sw.bb73, %if.end67, %sw.bb61, %sw.bb
  %60 = load i32, ptr %remain, align 4
  %61 = load i32, ptr %rv, align 4
  %sub90 = sub nsw i32 %60, %61
  %62 = load i32, ptr %itemlen, align 4
  %cmp91 = icmp slt i32 %sub90, %62
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %sw.epilog
  %63 = load i32, ptr %remain, align 4
  store i32 %63, ptr %retval, align 4
  br label %return

if.end94:                                         ; preds = %sw.epilog
  %64 = load i32, ptr %itemlen, align 4
  %65 = load i32, ptr %rv, align 4
  %add95 = add nsw i32 %65, %64
  store i32 %add95, ptr %rv, align 4
  %66 = load i32, ptr %itemlen, align 4
  %call96 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %66)
  br label %while.cond, !llvm.loop !8

while.end:                                        ; preds = %lor.end
  %67 = load i32, ptr %rv, align 4
  store i32 %67, ptr %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then93, %sw.default, %if.then79, %if.then66, %if.then43, %if.then34, %if.then24, %if.then12, %if.then
  %68 = load i32, ptr %retval, align 4
  ret i32 %68
}

declare i32 @__VERIFIER_nondet_int(...) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

declare i32 @__VERIFIER_nondet_uchar(...) #1

declare i32 @printf(ptr noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 15.0.2"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
